
t0:     file format elf32-i386


Disassembly of section .init:

08048378 <_init>:
 8048378:	53                   	push   %ebx
 8048379:	83 ec 08             	sub    $0x8,%esp
 804837c:	e8 00 00 00 00       	call   8048381 <_init+0x9>
 8048381:	5b                   	pop    %ebx
 8048382:	81 c3 73 1c 00 00    	add    $0x1c73,%ebx
 8048388:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 804838e:	85 c0                	test   %eax,%eax
 8048390:	74 05                	je     8048397 <_init+0x1f>
 8048392:	e8 49 00 00 00       	call   80483e0 <__gmon_start__@plt>
 8048397:	e8 34 01 00 00       	call   80484d0 <frame_dummy>
 804839c:	e8 ef 02 00 00       	call   8048690 <__do_global_ctors_aux>
 80483a1:	83 c4 08             	add    $0x8,%esp
 80483a4:	5b                   	pop    %ebx
 80483a5:	c3                   	ret    

Disassembly of section .plt:

080483b0 <printf@plt-0x10>:
 80483b0:	ff 35 f8 9f 04 08    	pushl  0x8049ff8
 80483b6:	ff 25 fc 9f 04 08    	jmp    *0x8049ffc
 80483bc:	00 00                	add    %al,(%eax)
	...

080483c0 <printf@plt>:
 80483c0:	ff 25 00 a0 04 08    	jmp    *0x804a000
 80483c6:	68 00 00 00 00       	push   $0x0
 80483cb:	e9 e0 ff ff ff       	jmp    80483b0 <_init+0x38>

080483d0 <fwrite@plt>:
 80483d0:	ff 25 04 a0 04 08    	jmp    *0x804a004
 80483d6:	68 08 00 00 00       	push   $0x8
 80483db:	e9 d0 ff ff ff       	jmp    80483b0 <_init+0x38>

080483e0 <__gmon_start__@plt>:
 80483e0:	ff 25 08 a0 04 08    	jmp    *0x804a008
 80483e6:	68 10 00 00 00       	push   $0x10
 80483eb:	e9 c0 ff ff ff       	jmp    80483b0 <_init+0x38>

080483f0 <exit@plt>:
 80483f0:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 80483f6:	68 18 00 00 00       	push   $0x18
 80483fb:	e9 b0 ff ff ff       	jmp    80483b0 <_init+0x38>

08048400 <__libc_start_main@plt>:
 8048400:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048406:	68 20 00 00 00       	push   $0x20
 804840b:	e9 a0 ff ff ff       	jmp    80483b0 <_init+0x38>

08048410 <fcntl@plt>:
 8048410:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048416:	68 28 00 00 00       	push   $0x28
 804841b:	e9 90 ff ff ff       	jmp    80483b0 <_init+0x38>

08048420 <putchar@plt>:
 8048420:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048426:	68 30 00 00 00       	push   $0x30
 804842b:	e9 80 ff ff ff       	jmp    80483b0 <_init+0x38>

08048430 <atoi@plt>:
 8048430:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 8048436:	68 38 00 00 00       	push   $0x38
 804843b:	e9 70 ff ff ff       	jmp    80483b0 <_init+0x38>

Disassembly of section .text:

08048440 <_start>:
 8048440:	31 ed                	xor    %ebp,%ebp
 8048442:	5e                   	pop    %esi
 8048443:	89 e1                	mov    %esp,%ecx
 8048445:	83 e4 f0             	and    $0xfffffff0,%esp
 8048448:	50                   	push   %eax
 8048449:	54                   	push   %esp
 804844a:	52                   	push   %edx
 804844b:	68 80 86 04 08       	push   $0x8048680
 8048450:	68 10 86 04 08       	push   $0x8048610
 8048455:	51                   	push   %ecx
 8048456:	56                   	push   %esi
 8048457:	68 f4 84 04 08       	push   $0x80484f4
 804845c:	e8 9f ff ff ff       	call   8048400 <__libc_start_main@plt>
 8048461:	f4                   	hlt    
 8048462:	90                   	nop
 8048463:	90                   	nop
 8048464:	90                   	nop
 8048465:	90                   	nop
 8048466:	90                   	nop
 8048467:	90                   	nop
 8048468:	90                   	nop
 8048469:	90                   	nop
 804846a:	90                   	nop
 804846b:	90                   	nop
 804846c:	90                   	nop
 804846d:	90                   	nop
 804846e:	90                   	nop
 804846f:	90                   	nop

08048470 <__do_global_dtors_aux>:
 8048470:	55                   	push   %ebp
 8048471:	89 e5                	mov    %esp,%ebp
 8048473:	53                   	push   %ebx
 8048474:	83 ec 04             	sub    $0x4,%esp
 8048477:	80 3d 2c a0 04 08 00 	cmpb   $0x0,0x804a02c
 804847e:	75 3f                	jne    80484bf <__do_global_dtors_aux+0x4f>
 8048480:	a1 30 a0 04 08       	mov    0x804a030,%eax
 8048485:	bb 20 9f 04 08       	mov    $0x8049f20,%ebx
 804848a:	81 eb 1c 9f 04 08    	sub    $0x8049f1c,%ebx
 8048490:	c1 fb 02             	sar    $0x2,%ebx
 8048493:	83 eb 01             	sub    $0x1,%ebx
 8048496:	39 d8                	cmp    %ebx,%eax
 8048498:	73 1e                	jae    80484b8 <__do_global_dtors_aux+0x48>
 804849a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80484a0:	83 c0 01             	add    $0x1,%eax
 80484a3:	a3 30 a0 04 08       	mov    %eax,0x804a030
 80484a8:	ff 14 85 1c 9f 04 08 	call   *0x8049f1c(,%eax,4)
 80484af:	a1 30 a0 04 08       	mov    0x804a030,%eax
 80484b4:	39 d8                	cmp    %ebx,%eax
 80484b6:	72 e8                	jb     80484a0 <__do_global_dtors_aux+0x30>
 80484b8:	c6 05 2c a0 04 08 01 	movb   $0x1,0x804a02c
 80484bf:	83 c4 04             	add    $0x4,%esp
 80484c2:	5b                   	pop    %ebx
 80484c3:	5d                   	pop    %ebp
 80484c4:	c3                   	ret    
 80484c5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80484c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080484d0 <frame_dummy>:
 80484d0:	55                   	push   %ebp
 80484d1:	89 e5                	mov    %esp,%ebp
 80484d3:	83 ec 18             	sub    $0x18,%esp
 80484d6:	a1 24 9f 04 08       	mov    0x8049f24,%eax
 80484db:	85 c0                	test   %eax,%eax
 80484dd:	74 12                	je     80484f1 <frame_dummy+0x21>
 80484df:	b8 00 00 00 00       	mov    $0x0,%eax
 80484e4:	85 c0                	test   %eax,%eax
 80484e6:	74 09                	je     80484f1 <frame_dummy+0x21>
 80484e8:	c7 04 24 24 9f 04 08 	movl   $0x8049f24,(%esp)
 80484ef:	ff d0                	call   *%eax
 80484f1:	c9                   	leave  
 80484f2:	c3                   	ret    
 80484f3:	90                   	nop

080484f4 <main>:
#include<sys/types.h>
#include<fcntl.h>
#include<stdio.h>
#include<stdlib.h>
int main(int argc, char *argv[])
{
 80484f4:	55                   	push   %ebp
 80484f5:	89 e5                	mov    %esp,%ebp
 80484f7:	83 e4 f0             	and    $0xfffffff0,%esp
 80484fa:	83 ec 20             	sub    $0x20,%esp
	int val;
/*  	if (argc != 2) {
		fputs("usage: a.out <descriptor#>\n", stderr);
		exit(1);
	}
*/	if ((val = fcntl(2,F_GETFL)) < 0) {
 80484fd:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
 8048504:	00 
 8048505:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804850c:	e8 ff fe ff ff       	call   8048410 <fcntl@plt>
 8048511:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 8048515:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
 804851a:	79 2d                	jns    8048549 <main+0x55>
		printf("fcntl error for fd %d\n", atoi(argv[1]));
 804851c:	8b 45 0c             	mov    0xc(%ebp),%eax
 804851f:	83 c0 04             	add    $0x4,%eax
 8048522:	8b 00                	mov    (%eax),%eax
 8048524:	89 04 24             	mov    %eax,(%esp)
 8048527:	e8 04 ff ff ff       	call   8048430 <atoi@plt>
 804852c:	ba e0 86 04 08       	mov    $0x80486e0,%edx
 8048531:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048535:	89 14 24             	mov    %edx,(%esp)
 8048538:	e8 83 fe ff ff       	call   80483c0 <printf@plt>
		exit(1);
 804853d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8048544:	e8 a7 fe ff ff       	call   80483f0 <exit@plt>
	}
	switch(val & O_ACCMODE) {
 8048549:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 804854d:	83 e0 03             	and    $0x3,%eax
 8048550:	83 f8 01             	cmp    $0x1,%eax
 8048553:	74 18                	je     804856d <main+0x79>
 8048555:	83 f8 02             	cmp    $0x2,%eax
 8048558:	74 22                	je     804857c <main+0x88>
 804855a:	85 c0                	test   %eax,%eax
 804855c:	75 2d                	jne    804858b <main+0x97>
		case O_RDONLY:
			printf("read only");
 804855e:	b8 f7 86 04 08       	mov    $0x80486f7,%eax
 8048563:	89 04 24             	mov    %eax,(%esp)
 8048566:	e8 55 fe ff ff       	call   80483c0 <printf@plt>
			break;
 804856b:	eb 52                	jmp    80485bf <main+0xcb>
		case O_WRONLY:
			printf("write only");
 804856d:	b8 01 87 04 08       	mov    $0x8048701,%eax
 8048572:	89 04 24             	mov    %eax,(%esp)
 8048575:	e8 46 fe ff ff       	call   80483c0 <printf@plt>
			break;
 804857a:	eb 43                	jmp    80485bf <main+0xcb>
		case O_RDWR:
			printf("read write");
 804857c:	b8 0c 87 04 08       	mov    $0x804870c,%eax
 8048581:	89 04 24             	mov    %eax,(%esp)
 8048584:	e8 37 fe ff ff       	call   80483c0 <printf@plt>
			break;
 8048589:	eb 34                	jmp    80485bf <main+0xcb>
		default:
			fputs("invalid access mode\n", stderr);
 804858b:	a1 28 a0 04 08       	mov    0x804a028,%eax
 8048590:	89 c2                	mov    %eax,%edx
 8048592:	b8 17 87 04 08       	mov    $0x8048717,%eax
 8048597:	89 54 24 0c          	mov    %edx,0xc(%esp)
 804859b:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
 80485a2:	00 
 80485a3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 80485aa:	00 
 80485ab:	89 04 24             	mov    %eax,(%esp)
 80485ae:	e8 1d fe ff ff       	call   80483d0 <fwrite@plt>
			exit(1);
 80485b3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80485ba:	e8 31 fe ff ff       	call   80483f0 <exit@plt>
	}
	if (val & O_APPEND)
 80485bf:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80485c3:	25 00 04 00 00       	and    $0x400,%eax
 80485c8:	85 c0                	test   %eax,%eax
 80485ca:	74 0d                	je     80485d9 <main+0xe5>
		printf(", append");
 80485cc:	b8 2c 87 04 08       	mov    $0x804872c,%eax
 80485d1:	89 04 24             	mov    %eax,(%esp)
 80485d4:	e8 e7 fd ff ff       	call   80483c0 <printf@plt>
	if (val & O_NONBLOCK)
 80485d9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80485dd:	25 00 08 00 00       	and    $0x800,%eax
 80485e2:	85 c0                	test   %eax,%eax
 80485e4:	74 0d                	je     80485f3 <main+0xff>
		printf(", nonblocking");
 80485e6:	b8 35 87 04 08       	mov    $0x8048735,%eax
 80485eb:	89 04 24             	mov    %eax,(%esp)
 80485ee:	e8 cd fd ff ff       	call   80483c0 <printf@plt>
	putchar('\n');
 80485f3:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
 80485fa:	e8 21 fe ff ff       	call   8048420 <putchar@plt>
	return 0;
 80485ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048604:	c9                   	leave  
 8048605:	c3                   	ret    
 8048606:	90                   	nop
 8048607:	90                   	nop
 8048608:	90                   	nop
 8048609:	90                   	nop
 804860a:	90                   	nop
 804860b:	90                   	nop
 804860c:	90                   	nop
 804860d:	90                   	nop
 804860e:	90                   	nop
 804860f:	90                   	nop

08048610 <__libc_csu_init>:
 8048610:	55                   	push   %ebp
 8048611:	57                   	push   %edi
 8048612:	56                   	push   %esi
 8048613:	53                   	push   %ebx
 8048614:	e8 69 00 00 00       	call   8048682 <__i686.get_pc_thunk.bx>
 8048619:	81 c3 db 19 00 00    	add    $0x19db,%ebx
 804861f:	83 ec 1c             	sub    $0x1c,%esp
 8048622:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048626:	8d bb 20 ff ff ff    	lea    -0xe0(%ebx),%edi
 804862c:	e8 47 fd ff ff       	call   8048378 <_init>
 8048631:	8d 83 20 ff ff ff    	lea    -0xe0(%ebx),%eax
 8048637:	29 c7                	sub    %eax,%edi
 8048639:	c1 ff 02             	sar    $0x2,%edi
 804863c:	85 ff                	test   %edi,%edi
 804863e:	74 29                	je     8048669 <__libc_csu_init+0x59>
 8048640:	31 f6                	xor    %esi,%esi
 8048642:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048648:	8b 44 24 38          	mov    0x38(%esp),%eax
 804864c:	89 2c 24             	mov    %ebp,(%esp)
 804864f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048653:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048657:	89 44 24 04          	mov    %eax,0x4(%esp)
 804865b:	ff 94 b3 20 ff ff ff 	call   *-0xe0(%ebx,%esi,4)
 8048662:	83 c6 01             	add    $0x1,%esi
 8048665:	39 fe                	cmp    %edi,%esi
 8048667:	75 df                	jne    8048648 <__libc_csu_init+0x38>
 8048669:	83 c4 1c             	add    $0x1c,%esp
 804866c:	5b                   	pop    %ebx
 804866d:	5e                   	pop    %esi
 804866e:	5f                   	pop    %edi
 804866f:	5d                   	pop    %ebp
 8048670:	c3                   	ret    
 8048671:	eb 0d                	jmp    8048680 <__libc_csu_fini>
 8048673:	90                   	nop
 8048674:	90                   	nop
 8048675:	90                   	nop
 8048676:	90                   	nop
 8048677:	90                   	nop
 8048678:	90                   	nop
 8048679:	90                   	nop
 804867a:	90                   	nop
 804867b:	90                   	nop
 804867c:	90                   	nop
 804867d:	90                   	nop
 804867e:	90                   	nop
 804867f:	90                   	nop

08048680 <__libc_csu_fini>:
 8048680:	f3 c3                	repz ret 

08048682 <__i686.get_pc_thunk.bx>:
 8048682:	8b 1c 24             	mov    (%esp),%ebx
 8048685:	c3                   	ret    
 8048686:	90                   	nop
 8048687:	90                   	nop
 8048688:	90                   	nop
 8048689:	90                   	nop
 804868a:	90                   	nop
 804868b:	90                   	nop
 804868c:	90                   	nop
 804868d:	90                   	nop
 804868e:	90                   	nop
 804868f:	90                   	nop

08048690 <__do_global_ctors_aux>:
 8048690:	55                   	push   %ebp
 8048691:	89 e5                	mov    %esp,%ebp
 8048693:	53                   	push   %ebx
 8048694:	83 ec 04             	sub    $0x4,%esp
 8048697:	a1 14 9f 04 08       	mov    0x8049f14,%eax
 804869c:	83 f8 ff             	cmp    $0xffffffff,%eax
 804869f:	74 13                	je     80486b4 <__do_global_ctors_aux+0x24>
 80486a1:	bb 14 9f 04 08       	mov    $0x8049f14,%ebx
 80486a6:	66 90                	xchg   %ax,%ax
 80486a8:	83 eb 04             	sub    $0x4,%ebx
 80486ab:	ff d0                	call   *%eax
 80486ad:	8b 03                	mov    (%ebx),%eax
 80486af:	83 f8 ff             	cmp    $0xffffffff,%eax
 80486b2:	75 f4                	jne    80486a8 <__do_global_ctors_aux+0x18>
 80486b4:	83 c4 04             	add    $0x4,%esp
 80486b7:	5b                   	pop    %ebx
 80486b8:	5d                   	pop    %ebp
 80486b9:	c3                   	ret    
 80486ba:	90                   	nop
 80486bb:	90                   	nop

Disassembly of section .fini:

080486bc <_fini>:
 80486bc:	53                   	push   %ebx
 80486bd:	83 ec 08             	sub    $0x8,%esp
 80486c0:	e8 00 00 00 00       	call   80486c5 <_fini+0x9>
 80486c5:	5b                   	pop    %ebx
 80486c6:	81 c3 2f 19 00 00    	add    $0x192f,%ebx
 80486cc:	e8 9f fd ff ff       	call   8048470 <__do_global_dtors_aux>
 80486d1:	83 c4 08             	add    $0x8,%esp
 80486d4:	5b                   	pop    %ebx
 80486d5:	c3                   	ret    
